// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  AGENCY
  WORKER
  CLIENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum DeviceType {
  DESKTOP
  MOBILE
}

model User {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  auth0Id      String?      @unique
  email        String       @unique
  name         String?
  role         Role         @default(CLIENT)
  memberships  UserAgency[]
  tasks        Task[]       @relation("UserTasks")
  clientLinks  UserClient[]
}

model Agency {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String
  subdomain      String?       @unique
  logoUrl        String?
  primaryColor   String?
  secondaryColor String?
  contactEmail   String?
  contactPhone   String?
  users          UserAgency[]
  clients        Client[]
  tasks          Task[]
  reports        Report[]
}

model UserAgency {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  agency    Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  agencyId  String
  agencyRole Role?
  @@unique([userId, agencyId])
}

model Client {
  id              String     @id @default(cuid())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  name            String
  websiteUrl      String?
  industry        String?
  targetLocations Json?
  competitors     Json?
  notes           String?
  agency          Agency     @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  agencyId        String
  keywords        Keyword[]
  tasks           Task[]
  reports         Report[]
  labLists        LabList[]
  userLinks       UserClient[]
}

model UserClient {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  client    Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId  String
  @@unique([userId, clientId])
}

model Keyword {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  text         String
  intent       String?
  cpc          Float?
  difficulty   Float?
  volume       Int?
  geo          String?
  device       DeviceType @default(DESKTOP)
  client       Client?    @relation(fields: [clientId], references: [id], onDelete: SetNull)
  clientId     String?
  rankings     Ranking[]
  source       String?
}

model Ranking {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  date        DateTime
  position    Int
  device      DeviceType @default(DESKTOP)
  isLocalPack Boolean    @default(false)
  geo         String?
  keyword     Keyword    @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  keywordId   String
}

model Task {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  title       String
  description String?
  status      TaskStatus  @default(TODO)
  proof       Json?
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String
  agency      Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  agencyId    String
  assignee    User?       @relation("UserTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId  String?
}

model Report {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  periodStart  DateTime
  periodEnd    DateTime
  pdfUrl       String?
  client       Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId     String
  agency       Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  agencyId     String
  dataSources  Json?
}

model LabList {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  name       String
  description String?
  items      Json?
  client     Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)
  clientId   String?
}